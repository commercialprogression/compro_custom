<?php

/**
 * @file
 * Custom module to perform misc tasks.
 */

/**
 * Implements hook_menu().
 */
function compro_custom_menu() {
  $items['admin/config/system/compro-custom'] = array(
    'title' => 'Compro Custom',
    'file' => 'compro_custom.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('compro_custom_admin'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/system/compro-custom/submitted'] = array(
    'title' => 'Submitted lines',
    'file' => 'compro_custom.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('compro_custom_submitted'),
    'access arguments' => array('administer content types'),
  );
  return $items;
}

/**
 * Implements hook_page_build().
 */
function compro_custom_page_build(&$page) {
  // Conditionally add CSS, based on admin screen.
  $compro_custom = variable_get('compro_custom', '');
  if (isset($compro_custom['icon_enable']) && $compro_custom['icon_enable']) {
    if (isset($compro_custom['icon_neg']) && $compro_custom['icon_neg']) {
      drupal_add_css(drupal_get_path('module', 'compro_custom') . '/icons/compro_custom_neg.css', array(
        'every_page' => TRUE,
      ));
    }
    else {
      drupal_add_css(drupal_get_path('module', 'compro_custom') . '/icons/compro_custom.css', array(
        'every_page' => TRUE,
      ));
    }
  }
}

/**
 * Implements hook_block_info().
 */
function compro_custom_block_info() {
  return array(
    'copyright' => array(
      'info' => t('Copyright Notice'),
    ),
    'social_share' => array(
      'info' => t('Social share'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function compro_custom_block_view($delta = '') {
  $block = array('subject' => NULL, 'content' => NULL);

  switch ($delta) {
    case 'copyright':
      $block['content'] = '&copy; ' . date('Y') . ' ' . variable_get('site_name') .
          ', ' . t('All Rights Reserved.');

      break;
    case 'social_share':
      global $base_url;
      $page_url = $base_url . '/' . request_path();
      $page_title = drupal_get_title();
      $block['subject'] = t('Share this');
      $block['content'] = '<div class="social">' . 
        l(
          t('Facebook'), 'https://www.facebook.com/sharer/sharer.php', array(
            'query' => array(
              'u' => $page_url,
            ),
          )
        ) .
        l(
          t('Twitter'),
          'https://twitter.com/intent/tweet', array(
            'query' => array(
              'url' => $page_url,
              'text' => $page_title,
            ),
          )
        ) .
        l(
          t('LinkedIn'),
          'http://www.linkedin.com/shareArticle', array(
            'query' => array(
              'url' => $page_url,
              'title' => $page_title,
            ),
          )
        ) .
        '</div>';
        break;
  }

  return $block;
}

/**
 * Override the blockify standard logo block
 */
function theme_compro_custom_logo($variables) {
  $site_name = filter_xss_admin(variable_get('site_name', 'Drupal'));

  // Strip the base_path from the beginning of the logo path.
  $path = preg_replace('|^' . base_path() . '|', '', $variables['logo_path']);

  // Link path.
  $compro_custom = variable_get('compro_custom', '');
  $link_path = isset($compro_custom['logo']['url']) ? $compro_custom['logo']['url'] : '<front>';
  
  $image = array(
    '#theme' => 'image',
    '#path' => $path,
    '#alt' => t('!site_name', array(
      '!site_name' => $site_name,
    )),
  );

  $h_open = '';
  $h_close = '';
  $is_h = isset($compro_custom['logo']['heading']) ? $compro_custom['logo']['heading'] : 1;
  if ($is_h) {
    $h_open = '<h1 id="site-name">';
    $h_close = '</h1>';
  }
  return $h_open . l(render($image), $link_path, array(
    'html' => TRUE,
    'attributes' => array(
      'class' => array('logo'),
      'id' => 'logo',
      'rel' => 'home',
      'title' => check_plain(isset($compro_custom['logo']['title']) ? $compro_custom['logo']['title'] : $site_name . ' home'),
    ),
  )) . $h_close;
}

/**
 * Implements hook_theme_registry_alter().
 */
function compro_custom_theme_registry_alter(&$theme_registry) {
  $theme_registry['blockify_logo']['function'] = 'theme_compro_custom_logo';
}

/**
 * Implements hook_entity_info_alter().
 */
function compro_custom_entity_info_alter(&$entity_info) {
  // The view modes we want to add to all entities.
  $modes = array('teaser', 'small');
  
  // Add views modes for all types.
  foreach ($entity_info as $key => $value) {
    foreach ($modes as $mode) {
      if (!isset($entity_info[$key]['view modes'][$mode])) {
        $entity_info[$key]['view modes'][$mode] = array(
          'label' => t('@mode', array('@mode' => ucwords($mode))),
          'custom settings' => TRUE,
        );
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function compro_custom_preprocess_node(&$vars) {
  $vars['theme_hook_suggestions'][] = 'node__' . $vars['view_mode'];
  $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__' . $vars['view_mode'];
}

/**
 * Implement hook_field_formatter_info().
 */
function compro_custom_field_formatter_info() {
  return array(
    'compro_custom_file_link' => array(
      'label' => t('Link'),
      'field types' => array('file'),
      'settings' => array(
        'compro_custom_link_title' => '',
        'compro_custom_link_class' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function compro_custom_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  if ($instance['display']['default']['type'] == 'compro_custom_file_link') {
    $display = $instance['display'][$view_mode];
    $settings = $display['settings'];

    $element = array();

    $element['compro_custom_link_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Link title'),
      '#description' => t('Enter an optional link title to be shown instead of file name'),
      '#default_value' => $settings['compro_custom_link_title'],
    );

    $element['compro_custom_link_class'] = array(
      '#type' => 'textfield',
      '#title' => t('Class'),
      '#description' => t('Enter an optional class to be applied to the link'),
      '#default_value' => $settings['compro_custom_link_class'],
    );

  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function compro_custom_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  if ($instance['display']['default']['type'] == 'compro_custom_file_link') {
    $summary = t('Displays a title link');
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function compro_custom_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  if ($instance['display']['default']['type'] == 'compro_custom_file_link') {
    // Loop through items
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#theme' => 'link',
        '#text' => $settings['compro_custom_link_title'] ? $settings['compro_custom_link_title'] : $item['filename'],
        '#path' => file_create_url($item['uri']),
        '#options' => array(
          'attributes' => array('class' => array($settings['compro_custom_link_class'] ? $settings['compro_custom_link_class'] : '')),
          'html' => FALSE,
        ),
      );
    }

  }

  return $element;
}

/**
 * Implements hook_field_extra_fields().
 */
function compro_custom_field_extra_fields() {
  $entity_info = entity_get_info();
  $extra = array();
  
  // Go through all the entity types and add extra fields for display.
  foreach ($entity_info as $type => $info) {
    if ($type == 'node') {
      foreach ($info['bundles'] as $bundle => $bundle_info) {
        $extra[$type][$bundle] = array(
          'display' => array(
            'compro_submitted' => array(
              'label' => t('Submitted'),
              'description' => t('Author attribution for the content.'),
              'weight' => 0,
            ),
            'compro_links' => array(
              'label' => t('Links'),
              'description' => t('Node links, like "Read more".'),
              'weight' => 0,
            ),
          ),
          'form' => array(
            'compro_submitted' => array(
              'label' => t('Submitted'),
              'description' => t('Author attribution for the content.'),
              'edit' => l('Edit', 'admin/config/system/compro-custom/submitted'),
              'weight' => 0,
            ),
          ),
        );
      }
    }
  }

  return $extra;
}

/**
 * Implements hook_node_view().
 */
function compro_custom_node_view($node, $view_mode, $langcode) {
  $extra = field_extra_fields_get_display('node', $node->type, $view_mode);
  $su = 'compro_submitted';
  $li = 'compro_links';

  if (isset($extra[$su]) && isset($extra[$su]['visible']) && $extra[$su]['visible']) {
    $sub = variable_get('compro_submitted', '');
    $sub_line = 'Submitted by [node:author:name] on [node:created]';
    if (isset($sub[$node->type])) {
      $sub_line = $sub[$node->type];
    }
    $node->content[$su] = array(
      '#prefix' => '<div class="submitted">',
      '#markup' => token_replace($sub_line, array('node' => $node)), 
      '#suffix' => '</div>',
    );
  }
  
  if (isset($extra[$li]) && isset($extra[$li]['visible']) && $extra[$li]['visible']) {
    $node->content[$li] = $node->content['links'];
  }
}