<?php

/**
 * @file
 * Custom module to perform misc tasks.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Xss;
use Drupal\node\Entity\NodeType;

/**
 * Helper function to get options (all or available).
 */
function _compro_custom_get_options() {
  return array(
    'h1' => t('Heading 1'),
    'h2' => t('Heading 2'),
    'h3' => t('Heading 3'),
    'h4' => t('Heading 4'),
    'h5' => t('Heading 5'),
    'h6' => t('Heading 6'),
  );
}

/**
 * Implements hook_page_attachments().
 */
function compro_custom_page_attachments(array &$attachments) {
  // Conditionally add CSS, based on admin screen.
  $compro_custom = \Drupal::config('compro_custom.form');
  if ($compro_custom->get('icon_enable')) {
    if ($compro_custom->get('icon_neg')) {
      $attachments['#attached']['library'][] = 'compro_custom/neg_icons';
    }
    else {
      $attachments['#attached']['library'][] = 'compro_custom/icons';
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * In order to modify the core logo block, we have to trick Drupal into thinking
 * that Compro Custom is a theme.
 */
function compro_custom_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['block__system_branding_block'])) {
    $theme_registry['block__system_branding_block']['path'] = 'modules/custom/compro_custom/templates';
    $theme_registry['block__system_branding_block']['theme path'] = 'modules/custom/compro_custom';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Pass some more variables into our template file.
 */
function compro_custom_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'system_branding_block') {
    $site_name = Xss::filterAdmin(\Drupal::config('system.site')->get('name'));

    // Link path.
    $compro_custom = \Drupal::config('compro_custom.form');

    $variables['title_h1'] = $compro_custom->get('logo.heading') !== 1 ? FALSE : TRUE;
    // There doesn't seem to be a function that sanity-checks a route name, so
    // we fudge it here.
    $variables['logo_path'] = $compro_custom->get('logo.url') !== NULL ? $compro_custom->get('logo.url') : '<front>';
    if (strpos('http', $compro_custom->get('logo.url')) === FALSE) {
      $variables['logo_path'] = $compro_custom->get('logo.url');
    }
    else {
      $variables['logo_path'] = Url::fromRoute($compro_custom->get('logo.url'))
        ->toString();
    }
    $variables['logo_title'] = Html::escape($compro_custom->get('logo.title') !== NULL ? $compro_custom->get('logo.title') : $site_name . ' home');
  }
}

/**
 * This is how tokens adds new view modes during install.
 *
 * Implementing hook_entity_type_alter()
 * will throw an error, so it seems the best way to implement this
 * is during install, and when new entity types are created.
 */
function compro_custom_add_view_modes() {
  $modes = array('teaser', 'small');
  // Create view modes for each entity type.
  $info = \Drupal::entityTypeManager()->getDefinitions();
  foreach ($info as $entity_type => $entity_type_info) {
    // We're only interested in entity types with a view builder.
    if (!$entity_type_info->getViewBuilderClass()) {
      continue;
    }
    // Try to find a token view mode for that entity type.
    $storage = \Drupal::entityTypeManager()->getStorage('entity_view_mode');
    // Add view mode if it does not already exist.
    foreach ($modes as $mode) {
      if (!$storage->load("$entity_type.$mode")) {
        $storage->create(array(
          'targetEntityType' => $entity_type,
          'id' => "$entity_type.$mode",
          'status' => TRUE,
          'label' => ucwords($mode),
        ))->save();
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function compro_custom_entity_insert(EntityInterface $entity) {
  compro_custom_add_view_modes();
}
