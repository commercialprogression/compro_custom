<?php

/**
 * @file
 * Custom module to perform misc tasks.
 */

use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Xss;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_page_attachments().
 */
function compro_custom_page_attachments(array &$attachments) {
  // Conditionally add CSS, based on admin screen.
  $compro_custom = \Drupal::config('compro_custom.form');
  if ( $compro_custom->get('icon_enable')) {
    if ($compro_custom->get('icon_neg')) {
      $attachments['#attached']['library'][] = 'compro_custom/neg_icons';
    }
    else {
      $attachments['#attached']['library'][] = 'compro_custom/icons';
    }
  }
}

/**
 * Override the blockify standard logo block
 */
function theme_compro_custom_logo() {
  $site_name = Xss::filterAdmin(\Drupal::config('system.site')->get('name'));
  $config = \Drupal::config('blockify.logo_path'); //TODO update this when blockify gets with the times

  // Strip the base_path from the beginning of the logo path.
  $path = preg_replace('|^' . base_path() . '|', '', $config->get('logo_path'));

  // Link path.
  $compro_custom = \Drupal::config('compro_custom.form');
  $link_path = $compro_custom->get('logo.url') !== NULL ? $compro_custom->get('logo.url') : '<front>';

  $image = array(
    '#theme' => 'image',
    '#path' => $path,
    '#alt' => t('!site_name', array(
      '!site_name' => $site_name,
    )),
  );

  $h_open = '';
  $h_close = '';
  $is_h = $compro_custom->get('logo.heading') !== NULL ? $compro_custom->get('logo.heading') : 1;
  if ($is_h) {
    $h_open = '<h1 id="site-name">';
    $h_close = '</h1>';
  }
  return $h_open . \Drupal::l(render($image), Url::fromRoute($link_path, array(), array(
    'html' => TRUE,
    'attributes' => array(
      'class' => array('logo'),
      'id' => 'logo',
      'rel' => 'home',
      'title' => Html::escape($compro_custom->get('logo.title') !== NULL ? $compro_custom->get('logo.title') : $site_name . ' home'),
    ),
  ))) . $h_close;
}

/**
 * Implements hook_theme_registry_alter().
 */
function compro_custom_theme_registry_alter(&$theme_registry) {
  $theme_registry['blockify_logo']['function'] = 'theme_compro_custom_logo';
}

/**
 * This is how tokens adds new view modes during install. Implementing hook_entity_type_alter()
 * will throw an error, so it seems the best way to implement this
 * is during install, and when new entity types are created.
 */
function compro_custom_add_view_modes() {
  $modes = array('teaser', 'small');
  // Create view modes for each entity type.
  $info = \Drupal::entityManager()->getDefinitions();
  foreach ($info as $entity_type => $entity_type_info) {
    // We're only interested in entity types with a view builder.
    if (!$entity_type_info->getViewBuilderClass()) {
      continue;
    }
    // Try to find a token view mode for that entity type.
    $storage = \Drupal::entityManager()->getStorage('entity_view_mode');
    // Add view mode if it does not already exist.
    foreach ($modes as $mode) {
      if (!$storage->load("$entity_type.$mode")) {
        $storage->create(array(
          'targetEntityType' => $entity_type,
          'id' => "$entity_type.$mode",
          'status' => TRUE,
          'label' => ucwords($mode),
        ))->save();
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function compro_custom_entity_insert(EntityInterface $entity) {
  compro_custom_add_view_modes();
}

/**
 * Implements hook_entity_extra_field_info().
 */
function compro_custom_entity_extra_field_info() {
  $extra = array();

  // Go through all the entity types and add extra fields for display.
  foreach (NodeType::loadMultiple() as $bundle) {
    $extra['node'][$bundle->Id()] = array(
      'display' => array(
        'compro_submitted' => array(
          'label' => t('Submitted'),
          'description' => t('Author attribution for the content.'),
          'weight' => 0,
        ),
        'compro_links' => array(
          'label' => t('Links'),
          'description' => t('Node links, like "Read more".'),
          'weight' => 0,
        ),
      ),
      'form' => array(
        'compro_submitted' => array(
          'label' => t('Submitted'),
          'description' => t('Author attribution for the content.'),
          'edit' => \Drupal::l('Edit', Url::fromRoute('compro_custom.compro_custom_submitted')),
          'weight' => 0,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function compro_custom_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('compro_submitted')) {
    $sub = \Drupal::config('compro_custom.compro_submitted');
    $sub_line = 'Submitted by [node:author:name] on [node:created]';
    if ($sub->get($entity->bundle())) {
      $sub_line = $sub->get($entity->bundle());
    }
    $build['compro_submitted'] = [
      '#prefix' => '<div class="submitted">',
      '#markup' => \Drupal::token()->replace($sub_line, array('node' => $entity)),
      '#suffix' => '</div>',
    ];
  }

  if ($display->getComponent('compro_links')) {
    $build['compro_links'] = $build['links'];
  }
}